#!/usr/bin/env node

require('dotenv').config({silent: true})

const fs = require('fs')
const loadDatabase = require('../lib/load-database')
const cleanup = require('../lib/sync/cleanup')
const determineSyncStrategy = require('../lib/sync/determine-sync-strategy')
const syncFromContentFul = require('../lib/sync/sync-from-contentful')
const storeSyncedData = require('../lib/sync/store-synced-data')
const downloadSyncedAssets = require('../lib/sync/download-synced-assets')
const filterImagesFromSyncedAssetsList = require('../lib/sync/filter-images-from-synced-assets-list')
const optimizeAssets = require('../lib/sync/optimize-assets')

function initConfig () {
  const basePath = fs.realpathSync('./')
  const publicPath = `${basePath}/public`
  const databasePath = `${publicPath}/content/db.json`

  return {
    config: {
      env: process.env.NODE_ENV,
      baseUrl: process.env.BASE_URL,
      basePath: basePath,
      publicPath: publicPath,
      databasePath: databasePath,
      assetPath: `${publicPath}/content/assets/`,
      contentfulSpace: process.env.CONTENTFUL_SPACE,
      contentfulAccessToken: process.env.CONTENTFUL_API_KEY,
      fullSync: process.env.CONTENTFUL_FULL_SYNC || false
    }
  }
}

function report (e) {
  console.log(e.config.fullSync ? 'Performed full sync' : 'Performed incremental sync')
  console.log(`Synced ${e.sync.entries.length} entries`)
  console.log(`Synced ${e.sync.assets.length} assets`)
  console.log(`Removed ${e.sync.deletedEntries.length} entries`)
  console.log(`Removed ${e.sync.deletedAssets.length} assets`)
  console.log(`Optimized ${e.images.length} images`)

  return e
}

function sync () {
  return Promise.resolve()
    .then(initConfig)
    .then(loadDatabase)
    .then(determineSyncStrategy)
    .then(cleanup)
    .then(syncFromContentFul)
    .then(storeSyncedData)
    .then(downloadSyncedAssets)
    .then(filterImagesFromSyncedAssetsList)
    .then(optimizeAssets)
    .then(report)
    .catch(err => { console.log(err); process.exit(1) })
}

sync()
